package tsc

import (
	"encoding/base64"
	"encoding/json"
)

// Base64Bytes represents the base64-encoded bytes sent to/from the Tenant Security Proxy.
type Base64Bytes struct {
	b []byte
}

//nolint:wrapcheck // Because this function is called by json code, it should return a json error.
func (b *Base64Bytes) UnmarshalJSON(data []byte) error {
	var str string
	if err := json.Unmarshal(data, &str); err != nil {
		return err
	}
	decoded, err := base64.StdEncoding.DecodeString(str)
	if err != nil {
		return err
	}
	b.b = decoded
	return nil
}

//nolint:wrapcheck // Because this function is called by json code, it should return a json error.
func (b Base64Bytes) MarshalJSON() ([]byte, error) {
	encodedStr := base64.StdEncoding.EncodeToString(b.b)
	encoded, err := json.Marshal(encodedStr)
	if err != nil {
		return nil, err
	}
	return encoded, nil
}

// RequestMetadata holds metadata fields as part of a request. Each request has metadata associated with it
// that will be sent to the Tenant Security Proxy for logging and other purposes. Some examples include
// the tenant ID associated with the request, the service that is accessing the data, and a unique ID
// for the request.
type RequestMetadata struct {
	// TenantID is the unique ID of the tenant the action is being performed for.
	TenantID string `json:"tenantId"`
	// IclFields is metadata about the request for the Tenant Security Proxy to log.
	IclFields IclFields `json:"iclFields"`
	// CustomFields is optional additional information for the Tenant Security Proxy to log.
	CustomFields map[string]string `json:"customFields"`
}

type IclFields struct {
	// RequestingID (required) is the unique ID of user/service that is processing data.
	RequestingID string `json:"requestingId"`
	// DataLabel (optional) is the classification of data being processed.
	DataLabel string `json:"dataLabel,omitempty"`
	// SourceIP (optional) is the IP address of the initiator of this document request.
	SourceIP string `json:"sourceIp,omitempty"`
	// ObjectID (optional) is the ID of the object/document being acted on in the host system.
	ObjectID string `json:"objectId,omitempty"`
	// RequestID (optional) is the unique ID that ties the application request ID to Tenant Security Proxy logs.
	RequestID string `json:"requestId,omitempty"`
}

// Dek is the Document Encryption Key generated by the Tenant Security Proxy.
type Dek = Base64Bytes

// Edek is the Encrypted Document Encryption Key generated by the Tenant Security Proxy.
type Edek = Base64Bytes

type WrapKeyRequest struct {
	RequestMetadata
}

type WrapKeyResponse struct {
	Dek  Dek  `json:"dek"`
	Edek Edek `json:"edek"`
}

type BatchWrapKeyRequest struct {
	DocumentIds []string `json:"documentIds"`
	RequestMetadata
}

type BatchWrapKeyResponse struct {
	Keys     map[string]WrapKeyResponse `json:"keys"`
	Failures map[string]Error           `json:"failures"`
}

type UnwrapKeyRequest struct {
	Edek Edek `json:"encryptedDocumentKey"`
	RequestMetadata
}

type UnwrapKeyResponse struct {
	Dek Dek `json:"dek"`
}

type BatchUnwrapKeyRequest struct {
	Edeks map[string]Edek `json:"edeks"`
	RequestMetadata
}

type BatchUnwrapKeyResponse struct {
	Keys     map[string]UnwrapKeyResponse `json:"keys"`
	Failures map[string]Error             `json:"failures"`
}

type RekeyRequest struct {
	Edek        Edek   `json:"encryptedDocumentKey"`
	NewTenantID string `json:"newTenantId"`
	RequestMetadata
}

type RekeyResponse = WrapKeyResponse

// TODO: need LogSecurityEventRequest
